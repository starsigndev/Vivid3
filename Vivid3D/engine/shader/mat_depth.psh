
struct PSInput
{
    float4 Pos   : SV_POSITION;
    float3 v_CameraPos : POSITION1;
    float3 fragPos : POSITION2;
    float4 v_CameraExt : POSITION3;
   // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{


    //float dist = abs(length(PSIn.fragPos-PSIn.vPos));

    float dist = distance(PSIn.fragPos,PSIn.v_CameraPos);

    float depth = PSIn.Pos.z / PSIn.Pos.w;


   
    float zval = dist / PSIn.v_CameraExt.y;
    if(zval>1.0){
        zval = 1.0;
    }




    PSOut.Color = float4(zval,zval,zval,1);
  
}

//