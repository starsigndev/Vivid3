
Texture2D    v_Texture;
SamplerState v_Texture_sampler;


struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_Blur : POSITION1;
 
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

 
  
   
    float4 ffcol =v_Texture.Sample(v_Texture_sampler, PSIn.Uv) * PSIn.v_Color;

  float3 col = float3(0,0,0);

    float steps=10;

    float sc=0;

    for(float x=-steps;x<steps;x++)
    {
        for(float y=-steps;y<steps;y++){

            float2 uv = PSIn.Uv.xy;

            float ax = x*PSIn.v_Blur.x;
            float ay = y*PSIn.v_Blur.x;

            float df = sqrt(ax*ax+ay*ay) / (steps*4);
            df = 1.0 - df;
            if(df<0){
                df=0;
            }


           

            uv.x = uv.x + ay;
            uv.y = uv.y + ax;

            if(uv.x>=0 && uv.x<=1.0 && uv.y>=0 && uv.y<=1.0){

            col = col + v_Texture.Sample(v_Texture_sampler,uv).rgb*df;

            sc++;

            }
        }
    }
    //ffcol.rgb = v_Texture.Sample(v_Texture_sampler,PSIn.Uv).rgb;

    col = col / sc;

    ffcol.rgb = col;

    


    PSOut.Color = ffcol;


}

