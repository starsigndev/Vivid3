
Texture2D    v_Texture;
SamplerState v_Texture_sampler;


struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_Blur : POSITION1;
 
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

static const int KERNEL_SIZE = 19;
static const float2 GAUSSIAN_WEIGHTS[KERNEL_SIZE] = {
    float2(-9, 0.000229),
    float2(-8, 0.001082),
    float2(-7, 0.004292),
    float2(-6, 0.014317),
    float2(-5, 0.040134),
    float2(-4, 0.094454),
    float2(-3, 0.186572),
    float2(-2, 0.309789),
    float2(-1, 0.432369),
    float2(0, 0.507523),
    float2(1, 0.432369),
    float2(2, 0.309789),
    float2(3, 0.186572),
    float2(4, 0.094454),
    float2(5, 0.040134),
    float2(6, 0.014317),
    float2(7, 0.004292),
    float2(8, 0.001082),
    float2(9, 0.000229)
};

float4 GaussianBlur(Texture2D tex, SamplerState samplerState, float2 uv, float blurFactor)
{
    float4 color = float4(0, 0, 0, 0);
    uint width, height;
    tex.GetDimensions(width, height);
    float2 texelSize = float2(1.0 / width, 1.0 / height);
    
    [unroll]
    for (int i = 0; i < KERNEL_SIZE; i++)
    {
        float2 offset = GAUSSIAN_WEIGHTS[i].x * texelSize * blurFactor * 5.0;
        float weight = GAUSSIAN_WEIGHTS[i].y;
        
        // Horizontal pass
        color += tex.Sample(samplerState, uv + float2(offset.x, 0)) * weight;
        
        // Vertical pass
        color += tex.Sample(samplerState, uv + float2(0, offset.y)) * weight;
    }
    
    return color / 2.0; // Divide by 2 because we're doing both horizontal and vertical in one pass
}
// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

 
  
   

  float4 col = GaussianBlur(v_Texture,v_Texture_sampler,PSIn.Uv.xy,PSIn.v_Blur.x);

    float4 ffcol;

    ffcol.rgb = col.rgb;
    ffcol.a = 1.0;

    


    PSOut.Color = ffcol;


}

