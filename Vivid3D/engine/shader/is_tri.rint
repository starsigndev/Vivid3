// IntersectionAttributes structure to store intersection data
struct IntersectionAttributes
{
    float3 hitPosition;
    float3 hitNormal;
};

// Custom Intersection Shader for triangles
[shader("intersection")]
void TriangleIntersectionShader(inout RaytracingAccelerationStructure accelerationStructure, in RayDesc ray, in uint InstanceIndex, in uint PrimitiveIndex, inout IntersectionAttributes attr)
{
    // Retrieve triangle vertices from a buffer
    Triangle triangle = TrianglesBuffer[PrimitiveIndex];

    // Moller-Trumbore intersection algorithm
    float3 v0v1 = triangle.v1 - triangle.v0;
    float3 v0v2 = triangle.v2 - triangle.v0;
    float3 pvec = cross(ray.Direction, v0v2);
    float det = dot(v0v1, pvec);

    if (abs(det) < 1e-8) return; // Parallel to the plane

    float invDet = 1.0 / det;
    float3 tvec = ray.Origin - triangle.v0;
    float u = dot(tvec, pvec) * invDet;
    if (u < 0.0 || u > 1.0) return;

    float3 qvec = cross(tvec, v0v1);
    float v = dot(ray.Direction, qvec) * invDet;
    if (v < 0.0 || u + v > 1.0) return;

    float t = dot(v0v2, qvec) * invDet;
    if (t > ray.TMin && t < ray.TMax)
    {
        ReportIntersection(t, PrimitiveIndex);
    }
}