
Texture2D    v_Texture;
SamplerState v_Texture_sampler;

Texture2D    v_Texture2;
SamplerState v_Texture2_sampler;

struct PSInput 
{ 
  float4 Pos   : SV_POSITION;
  float3 Uv : TEX_COORD;
  float4 v_Color : COLOR2;
  float4 v_Combine : POSITION1;
 
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

 
  
   
    float4 f1 =v_Texture.Sample(v_Texture_sampler, PSIn.Uv);
    float4 f2 =v_Texture2.Sample(v_Texture2_sampler, PSIn.Uv);  

    f1.rgb = f1.rgb * PSIn.v_Combine.x;
    f2.rgb = f2.rgb * PSIn.v_Combine.y;

    float4 ffcol;

    ffcol.rgb = (f1+f2);
    ffcol.a =1.0;


    PSOut.Color = ffcol;


}

